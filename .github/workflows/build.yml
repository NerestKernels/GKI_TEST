name: Kernel Build Process
permissions:
  contents: write
  actions: write 

on:
  workflow_call:
    inputs:
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      sub_level:
        required: true
        type: string
      os_patch_level:
        required: true
        type: string
      revision:
        required: false
        type: string

jobs:
  build-gki:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        apply_module_check_bypass: [true, false]

    steps:
      # # - name: Maximize Build Space
        # uses: AdityaGarg8/remove-unwanted-software@v5
        # with:
          # remove-dotnet: 'true'          # Frees ~2 GB
          # remove-android: 'true'         # Frees ~9 GB
          # remove-haskell: 'true'         # Frees ~5.2 GB
          # remove-codeql: 'true'          # Frees ~5.4 GB
          # remove-docker-images: 'true'   # Frees ~3.2 GB
          # remove-large-packages: 'true'  # Frees ~3.1 GB
          # remove-swapfile: 'true'        # Frees ~4 GB
          # remove-cached-tools: 'false'   # Avoid unless confirmed safe
          # verbose: 'true'                # Enable detailed logging
          
      - name: Set CONFIG Environment Variable
        run: |
          # Set CONFIG dynamically based on inputs values
          CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.sub_level }}"

          # Set CONFIG as an environment variable for future steps
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV

      - name: Install build dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            gcc-aarch64-linux-gnu \
            gcc-arm-linux-gnueabihf \
            clang \
            lld \
            llvm \
            libelf-dev \
            device-tree-compiler
          which dtc
          dtc --version

      - name: Setup Build Environment
        run: |
          AOSP_MIRROR=https://android.googlesource.com
          BRANCH=main-kernel-2025
          git clone $AOSP_MIRROR/kernel/prebuilts/build-tools -b $BRANCH --depth 1 kernel-build-tools &
          git clone $AOSP_MIRROR/platform/system/tools/mkbootimg -b $BRANCH --depth 1 mkbootimg &
          wait
          
          echo "AVBTOOL=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin/avbtool" >> $GITHUB_ENV
          echo "MKBOOTIMG=$GITHUB_WORKSPACE/mkbootimg/mkbootimg.py" >> $GITHUB_ENV
          echo "UNPACK_BOOTIMG=$GITHUB_WORKSPACE/mkbootimg/unpack_bootimg.py" >> $GITHUB_ENV
          echo "BOOT_SIGN_KEY_PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem" >> $GITHUB_ENV
          echo "PATH=$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/bin:$PATH" >> $GITHUB_ENV
          
          mkdir -p ./git-repo
          curl https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: Set boot sign key
        env:
          BOOT_SIGN_KEY: ${{ secrets.BOOT_SIGN_KEY }}
        run: |
          if [ ! -z "$BOOT_SIGN_KEY" ]; then
            echo "$BOOT_SIGN_KEY" > ./kernel-build-tools/linux-x86/share/avb/testkey_rsa2048.pem
          fi

      - name: Clone AnyKernel3 and Other Dependencies
        run: |
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          
          git clone https://github.com/TheFloresto/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://github.com/WildKernels/kernel_patches.git
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"

          ## Checkout specific commits for certain Android/kernel version combinations
          #if [ "${{ inputs.android_version }}-${{ inputs.kernel_version }}" = "android12-5.10" ]; then
          #  cd susfs4ksu
          #  git checkout 0ed20c1656af7806a1760837ad320e62a8fb40fd
          #  cd ..
          #elif [ "${{ inputs.android_version }}-${{ inputs.kernel_version }}" = "android13-5.10" ]; then
          #  cd susfs4ksu
          #  git checkout 19e5b616464577c986e079cea0700428422bccb5
          #  cd ..
          #elif [ "${{ inputs.android_version }}-${{ inputs.kernel_version }}" = "android13-5.15" ]; then
          #  cd susfs4ksu
          #  git checkout b443e5be35cd8275b97a776f8cc84fbbf8169749
          #  cd ..
          #elif [ "${{ inputs.android_version }}-${{ inputs.kernel_version }}" = "android14-5.15" ]; then
          #  cd susfs4ksu
          #  git checkout 40823c6a92d072721c2c05f37776f69e3689ce8f
          #  cd ..
          #elif [ "${{ inputs.android_version }}-${{ inputs.kernel_version }}" = "android14-6.1" ]; then
          #  cd susfs4ksu
          #  git checkout 0e19a05277d28182c7b653580117145c53e69e92
          #  cd ..
          #elif [ "${{ inputs.android_version }}-${{ inputs.kernel_version }}" = "android15-6.6" ]; then
          #  cd susfs4ksu
          #  git checkout ef036830ec9d56035d63d328185281c09726b20f
          #  cd ..
          #fi

      - name: Initialize and Sync Kernel Source
        run: |
          mkdir -p "$CONFIG"
          cd "$CONFIG"
          
          FORMATTED_BRANCH="${{ inputs.android_version }}-${{ inputs.kernel_version }}-${{ inputs.os_patch_level }}"
          
          $REPO init --depth=1 --u https://android.googlesource.com/kernel/manifest -b common-${FORMATTED_BRANCH} --repo-rev=v2.16
          
          REMOTE_BRANCH=$(git ls-remote https://android.googlesource.com/kernel/common ${FORMATTED_BRANCH})
          DEFAULT_MANIFEST_PATH=.repo/manifests/default.xml
          if grep -q deprecated <<< $REMOTE_BRANCH; then
            sed -i "s/\"${FORMATTED_BRANCH}\"/\"deprecated\/${FORMATTED_BRANCH}\"/g" $DEFAULT_MANIFEST_PATH
          fi
          
          $REPO sync -c --optimized-fetch --prune --no-tags --fail-fast -j$(nproc)

      - name: Extract Actual Sublevel for LTS Builds
        if: inputs.sub_level == 'X'
        run: |
          cd "$CONFIG/common"
          
          if [ -f "Makefile" ]; then
            ACTUAL_SUBLEVEL=$(grep '^SUBLEVEL = ' Makefile | awk '{print $3}')
            
            if [ -n "$ACTUAL_SUBLEVEL" ]; then
              OLD_CONFIG="$CONFIG"
              NEW_CONFIG="${{ inputs.android_version }}-${{ inputs.kernel_version }}-$ACTUAL_SUBLEVEL"
              
              echo "CONFIG=$NEW_CONFIG" >> $GITHUB_ENV
              echo "ACTUAL_SUBLEVEL=$ACTUAL_SUBLEVEL" >> $GITHUB_ENV
              
              cd ../..
              if [ -d "$OLD_CONFIG" ]; then
                mv "$OLD_CONFIG" "$NEW_CONFIG"
              fi
            fi
          fi

      - name: Apply glibc 2.38 Compatibility Fix
        if: inputs.android_version == 'android14' && inputs.kernel_version == '6.1'
        run: |
          if [ ! -e build/build.sh ]; then 
            GLIBC_VERSION=$(ldd --version 2>/dev/null | head -n 1 | awk '{print $NF}') 
            if [ "$(printf '%s\n' "2.38" "$GLIBC_VERSION" | sort -V | head -n1)" = "2.38" ]; then 
              cd $CONFIG/common/ && sed -i '/\$(Q)\$(MAKE) -C \$(SUBCMD_SRC) OUTPUT=\$(abspath \$(dir \$@))\/ \$(abspath \$@)/s//$(Q)$(MAKE) -C $(SUBCMD_SRC) EXTRA_CFLAGS="$(CFLAGS)" OUTPUT=$(abspath $(dir $@))\/ $(abspath $@)/' tools/bpf/resolve_btfids/Makefile 2>/dev/null || true
            fi 
          fi

      - name: Fix Less Then 6.6.50 Builds
        if: inputs.android_version == 'android15' && inputs.kernel_version == '6.6'
        run: |
          cd "$CONFIG/common"
          if ! grep -qxF '#include <trace/hooks/fs.h>' ./fs/namespace.c; then
              sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace\/hooks\/fs.h>' ./fs/namespace.c
          fi

      - name: Apply ptrace patch for older kernels
        if: fromJSON(inputs.kernel_version) < 5.16
        run: |
          cd "$CONFIG/common"
          patch -p1 -F 3 < "../../kernel_patches/gki_ptrace.patch"

      - name: Add KernelSU
        run: |
          cd "$CONFIG"
          curl -LSs "https://raw.githubusercontent.com/WildKernels/Wild_KSU/wild/kernel/setup.sh" | bash -s wild
          
      - name: Apply SUSFS Patches for KernelSU Variants
        run: |
          cd "$CONFIG"
          
          # Apply core SUSFS patches
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cd common
          patch -p1 --forward < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch
          cd ..
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          # Apply KSU integration patches
          cd ./Wild_KSU
          cp ../../susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch .
          #cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.11/10_enable_susfs_for_ksu.patch ./
          patch -p1 --forward < 10_enable_susfs_for_ksu.patch || true
          
          # Apply compatibility fixes
          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.11/fix_core_hook.c.patch ./
          patch -p1 --forward --fuzz=3 < fix_core_hook.c.patch
          
          ## Skip fix_rules.c.patch for Android 14 with kernel 6.1
          #if [ "${{ inputs.android_version }}" != "android14" ] && [ "${{ inputs.kernel_version }}" != "6.1" ]; then
          #  cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.11/fix_rules.c.patch ./
          #  patch -p1 --forward < fix_rules.c.patch
          #fi

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.11/fix_sucompat.c.patch ./
          patch -p1 --forward < fix_sucompat.c.patch

          cp ../../kernel_patches/wild/susfs_fix_patches/v1.5.11/fix_kernel_compat.c.patch ./
          patch -p1 --forward < fix_kernel_compat.c.patch

      - name: Getting KernelSU Version
        run: |
          cd "$CONFIG/Wild_KSU/kernel"
          BASE_VERSION=10200
          COMMIT_COUNT=$(/usr/bin/git rev-list --count HEAD)
          KSU_VERSION=$(expr $COMMIT_COUNT "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          
      - name: Apply Hooks Patches
        run: |
          cd "$CONFIG/common"
          cp ../../kernel_patches/wild/hooks/scope_min_manual_hooks_v1.4.patch ./
          patch -p1 --forward -F 3 < scope_min_manual_hooks_v1.4.patch

      - name: Add BBG
        run: |
          cd "$CONFIG"
          echo "Adding BBG..."
          wget -O- https://github.com/vc-teahouse/Baseband-guard/raw/main/setup.sh | bash
          echo "CONFIG_BBG=y" >> common/arch/arm64/configs/gki_defconfig
          sed -i '/^config LSM$/,/^help$/{ /^[[:space:]]*default/ { /baseband_guard/! s/landlock/landlock,baseband_guard/ } }' common/security/Kconfig

      - name: Apply Module Check Bypass
        if: ${{ matrix.apply_module_check_bypass }}
        run: |
          if [[ "${{ inputs.kernel_version }}" == "6.1" || "${{ inputs.kernel_version }}" == "6.6" ]]; then
            cd "$CONFIG/common/kernel/module"
            sed -i '/bad_version:/{:a;n;/return 0;/{s/return 0;/return 1;/;b};ba}' version.c
          else
            cd "$CONFIG/common/kernel"
            sed -i '/bad_version:/{:a;n;/return 0;/{s/return 0;/return 1;/;b};ba}' module.c
          fi

      - name: Fix WiFi and Bluetooth on Samsung 6.6 GKI devices
        if: ${{ ( inputs.kernel_version == '6.6' ) }}
        run: |
          SYMBOL_LIST=$CONFIG/common/android/abi_gki_aarch64_galaxy
          echo "kdp_set_cred_non_rcu" >> $SYMBOL_LIST
          echo "kdp_usecount_dec_and_test" >> $SYMBOL_LIST
          echo "kdp_usecount_inc" >> $SYMBOL_LIST
          
          cd $CONFIG/common
          PATCH="../../kernel_patches/samsung/min_kdp/add-min_kdp-symbols.patch"
          if patch -p1 --dry-run < $PATCH; then
            patch -p1 --no-backup-if-mismatch < $PATCH
          fi
          
          cd drivers
          cp "../../../kernel_patches/samsung/min_kdp/min_kdp.c" min_kdp.c
          echo "obj-y += min_kdp.o" >> Makefile

      - name: Apply Kernel Configuration
        run: |
          cd "$CONFIG"
          
          defconfig="./common/arch/arm64/configs/gki_defconfig"
          
          echo "Applying kernel configurations one by one..."
          
          # KernelSU Core Configuration
          echo "CONFIG_KSU=y" >> "$defconfig"
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$defconfig"
          
          # Mountify Support
          echo "CONFIG_TMPFS_XATTR=y" >> "$defconfig"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$defconfig"
          
          # Networking Configuration
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$defconfig"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$defconfig"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$defconfig"
          
          # BBR TCP Congestion Control
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$defconfig"
          echo "CONFIG_NET_SCH_FQ=y" >> "$defconfig"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$defconfig"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$defconfig"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$defconfig"
          
          # IPSet support
          echo "CONFIG_IP_SET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_MAX=256" >> "$defconfig"
          echo "CONFIG_IP_SET_BITMAP_IP=y" >> "$defconfig"
          echo "CONFIG_IP_SET_BITMAP_IPMAC=y" >> "$defconfig"
          echo "CONFIG_IP_SET_BITMAP_PORT=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IP=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IPPORT=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IPPORTIP=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_IPPORTNET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NETNET=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NETPORT=y" >> "$defconfig"
          echo "CONFIG_IP_SET_HASH_NETIFACE=y" >> "$defconfig"

          # SUSFS Configuration
          echo "CONFIG_KSU_SUSFS=y" >> "$defconfig"
          #echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$defconfig"
          
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$defconfig"
          
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$defconfig"
          
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$defconfig"
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$defconfig"
          
          # Build Optimization Configuration          
          echo "CONFIG_LTO_CLANG_THIN=y" >> "$defconfig"
          echo "CONFIG_LTO_CLANG=y" >> "$defconfig"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE_O3=y" >> "$defconfig"
          
          sed -i '2s/check_defconfig//' ./common/build.config.gki

      - name: Change Kernel Name
        run: |
          cd "$CONFIG"
          #Set Kernel Timestamp
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT Mon Apr 20 08:09:31 UTC 2025"}' ./common/scripts/mkcompile_h
          #Set Custom Hostname and Username
          perl -pi -e 's/LINUX_COMPILE_BY=.*/LINUX_COMPILE_BY="thefloresto"/' ./common/scripts/mkcompile_h
          perl -pi -e 's/LINUX_COMPILE_HOST=.*/LINUX_COMPILE_HOST="thefloresto-labs"/' ./common/scripts/mkcompile_h        
          if [ -f "build/build.sh" ]; then
            #Remove Dirty Flag
            sed -i 's/-dirty//' ./common/scripts/setlocalversion
          else
            #Remove Dirty Flag
            sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
            #Remove Abi Exports and Error
            rm -rf ./common/android/abi_gki_protected_exports_*
            perl -pi -e 's/^\s*"protected_exports_list"\s*:\s*"android\/abi_gki_protected_exports_aarch64",\s*$//;' ./common/BUILD.bazel
          fi

      - name: Detect Clang Toolchain
        run: |
          set -euo pipefail
          CLANG_FOUND=false
          
          # Try to find clang in build-tools
          if [ -d "$GITHUB_WORKSPACE/kernel-build-tools/linux-x86/clang-r" ]; then
            latest=$(ls -d "$GITHUB_WORKSPACE"/kernel-build-tools/linux-x86/clang-r*/ 2>/dev/null | sort -V | tail -n1 || true)
            if [ -n "$latest" ] && [ -x "$latest/bin/clang" ]; then
              CLANG_BIN="$latest/bin"
              CLANG_FOUND=true
            fi
          fi
          
          # Fallback to system clang
          if ! $CLANG_FOUND && command -v clang >/dev/null 2>&1; then
            CLANG_BIN="$(dirname "$(command -v clang)")"
            CLANG_FOUND=true
            echo "Using system clang."
          fi
          
          $CLANG_FOUND || { echo "No clang toolchain found"; exit 1; }
          
          echo "CLANG_BIN_PATH=$CLANG_BIN" >> $GITHUB_ENV
          CLANG_VERSION="$("$CLANG_BIN/clang" --version | head -n1)"
          echo "CLANG_VERSION=$CLANG_VERSION" >> $GITHUB_ENV
          echo "Detected Clang: $CLANG_VERSION"

      - name: Build with Make (instead of bazel)
        run: |
          set -euo pipefail
          KERNEL_PATH="$GITHUB_WORKSPACE/$CONFIG"
          COMMON="$KERNEL_PATH/common"
          cd "$COMMON"
          
          # Clear scmversion
          : > "$COMMON/.scmversion"
          
          # Setup toolchain PATH
          if [ -n "${CLANG_BIN_PATH:-}" ] && [ -x "${CLANG_BIN_PATH}/clang" ]; then
            export PATH="${CLANG_BIN_PATH}:$PATH"
          fi
          
          # Export build variables
          export LLVM=1 LLVM_IAS=1
          export ARCH=arm64 SUBARCH=arm64
          export CROSS_COMPILE=aarch64-linux-gnu-
          export CROSS_COMPILE_COMPAT=arm-linux-gnueabi-
          export LD=ld.lld HOSTLD=ld.lld AR=llvm-ar NM=llvm-nm 
          export OBJCOPY=llvm-objcopy OBJDUMP=llvm-objdump STRIP=llvm-strip 
          export HOSTCC=clang HOSTCXX=clang++ CC=clang
          
          OUT=out
          mkdir -p "$OUT"
          
          # Generate config
          make O="$OUT" gki_defconfig
          
          # Apply LOCALVERSION
          scripts/config --file "$OUT/.config" --set-str LOCALVERSION "-GKI-TheFloresto"
          scripts/config --file "$OUT/.config" -d LOCALVERSION_AUTO || true
          sed -i 's/scm_version="$(scm_version --short)"/scm_version=""/' scripts/setlocalversion
          
          # Apply O3 optimization
          scripts/config --file "$OUT/.config" -d CC_OPTIMIZE_FOR_PERFORMANCE
          scripts/config --file "$OUT/.config" -e CC_OPTIMIZE_FOR_PERFORMANCE_O3
          export KCFLAGS="-Wno-error -pipe -O3 -fno-stack-protector -fgraphite-identity -floop-nest-optimize"
          export KCPPFLAGS="-DCONFIG_OPTIMIZE_INLINING"
          
          make O="$OUT" olddefconfig
          
          echo "Starting kernel build with $(nproc --all) threads..."
          set -o pipefail
          make -j"$(nproc --all)" O="$OUT" 2>&1 | tee build.log
          
          IMG="$OUT/arch/arm64/boot/Image"
          if [ ! -f "$IMG" ]; then
            echo "Kernel Image missing"; exit 1
          fi
          
          sha256sum "$IMG" | tee "$OUT/Image.sha256"
          
          # Validate Image
          if ! file "$IMG" | grep -qi 'ARM64'; then
            echo "Image does not appear to be ARM64:"
            file "$IMG"
            exit 1
          fi
          
          MIN_SIZE=$((6*1024*1024))
          ACTUAL_SIZE=$(stat -c %s "$IMG")
          if [ "$ACTUAL_SIZE" -lt "$MIN_SIZE" ]; then
            echo "Image size $ACTUAL_SIZE < $MIN_SIZE (suspicious)"; exit 1
          fi

      - name: Create AK3 ZIP
        run: |
          IMG_PATH="$CONFIG/common/out/arch/arm64/boot/Image"
          
          if [ ! -f "$IMG_PATH" ]; then
            echo "Error: Image file not found at $IMG_PATH"
            exit 1
          fi
          
          cp "$IMG_PATH" AnyKernel3/Image
          cd AnyKernel3

          # Use actual sublevel for LTS builds if available
          SUBLEVEL_FOR_NAME="${{ inputs.sub_level }}"
          if [ -n "$ACTUAL_SUBLEVEL" ]; then
            SUBLEVEL_FOR_NAME="$ACTUAL_SUBLEVEL"
          fi
          
          ZIP_NAME="WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-${{ matrix.apply_module_check_bypass && 'Module_Check_Bypass' || 'Normal' }}-AnyKernel3.zip"
          zip -r "../$ZIP_NAME" ./*

      - name: Create Bootimgs Folder and Copy Images
        run: |
          mkdir bootimgs
          
          IMG_PATH="$CONFIG/common/out/arch/arm64/boot/Image"
          
          echo "Copying Image files..."
          cp "$IMG_PATH" ./bootimgs/
          cp "$IMG_PATH" ./
          
          # Create lz4 compressed Image
          lz4 -9 -f ./Image ./Image.lz4
          lz4 -9 -f ./Image ./bootimgs/Image.lz4
          
          # Create gzip compressed Image
          gzip -n -k -f -9 ./Image
          cp ./Image.gz ./bootimgs/Image.gz

      - name: Android 12 boot image build script
        if: ${{ inputs.android_version == 'android12' }}
        run: |
          cd bootimgs
          
          SUBLEVEL_FOR_NAME="${{ inputs.sub_level }}"
          if [ -n "$ACTUAL_SUBLEVEL" ]; then
            SUBLEVEL_FOR_NAME="$ACTUAL_SUBLEVEL"
          fi
          
          GKI_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-"${{ inputs.os_patch_level }}"_"${{ inputs.revision }}".zip
          FALLBACK_URL=https://dl.google.com/android/gki/gki-certified-boot-android12-5.10-2023-01_r1.zip
          
          status=$(curl -sL -w "%{http_code}" "$GKI_URL" -o /dev/null)
          
          if [ "$status" = "200" ]; then
              curl -Lo gki-kernel.zip "$GKI_URL"
          else
              curl -Lo gki-kernel.zip "$FALLBACK_URL"
          fi
          
          unzip gki-kernel.zip && rm gki-kernel.zip
          
          FULL_PATH=$(pwd)/boot-5.10.img
          $UNPACK_BOOTIMG --boot_img="$FULL_PATH"

          echo "Building boot.img"
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-${{ matrix.apply_module_check_bypass && 'Module_Check_Bypass' || 'Normal' }}-boot.img

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-${{ matrix.apply_module_check_bypass && 'Module_Check_Bypass' || 'Normal' }}-boot-gz.img

          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img --ramdisk out/ramdisk --os_version 12.0.0 --os_patch_level "${{ inputs.os_patch_level }}"
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-${{ matrix.apply_module_check_bypass && 'Module_Check_Bypass' || 'Normal' }}-boot-lz4.img
          
      - name: Android 13/14/15 boot image build script
        if: ${{ inputs.android_version == 'android13' || inputs.android_version == 'android14' || inputs.android_version == 'android15' }}
        run: |
          cd bootimgs

          SUBLEVEL_FOR_NAME="${{ inputs.sub_level }}"
          if [ -n "$ACTUAL_SUBLEVEL" ]; then
            SUBLEVEL_FOR_NAME="$ACTUAL_SUBLEVEL"
          fi

          echo "Building boot.img"       
          $MKBOOTIMG --header_version 4 --kernel Image --output boot.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-${{ matrix.apply_module_check_bypass && 'Module_Check_Bypass' || 'Normal' }}-boot.img

          echo "Building boot-gz.img"
          $MKBOOTIMG --header_version 4 --kernel Image.gz --output boot-gz.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-gz.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-gz.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-${{ matrix.apply_module_check_bypass && 'Module_Check_Bypass' || 'Normal' }}-boot-gz.img

          echo "Building boot-lz4.img"
          $MKBOOTIMG --header_version 4 --kernel Image.lz4 --output boot-lz4.img
          $AVBTOOL add_hash_footer --partition_name boot --partition_size $((64 * 1024 * 1024)) --image boot-lz4.img --algorithm SHA256_RSA2048 --key $BOOT_SIGN_KEY_PATH
          cp ./boot-lz4.img ../WKSU-$KSUVER-${{ inputs.android_version }}-${{ inputs.kernel_version }}.$SUBLEVEL_FOR_NAME-${{ inputs.os_patch_level }}-${{ matrix.apply_module_check_bypass && 'Module_Check_Bypass' || 'Normal' }}-boot-lz4.img
          
      - name: Upload AnyKernel3 ZIP          
        uses: actions/upload-artifact@v4
        with:
          name: WKSU-${{ env.KSUVER }}-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ env.ACTUAL_SUBLEVEL || inputs.sub_level }}-${{ inputs.os_patch_level }}-${{ matrix.apply_module_check_bypass && 'Module_Check_Bypass' || 'Normal' }}-AnyKernel3
          path: "*.zip"

      - name: Upload Boot Image (Uncompressed)
        uses: actions/upload-artifact@v4
        with:
          name: WKSU-${{ env.KSUVER }}-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ env.ACTUAL_SUBLEVEL || inputs.sub_level }}-${{ inputs.os_patch_level }}-${{ matrix.apply_module_check_bypass && 'Module_Check_Bypass' || 'Normal' }}-boot
          path: "*-boot.img"

      - name: Upload Boot Image (GZ Compressed)
        uses: actions/upload-artifact@v4
        with:
          name: WKSU-${{ env.KSUVER }}-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ env.ACTUAL_SUBLEVEL || inputs.sub_level }}-${{ inputs.os_patch_level }}-${{ matrix.apply_module_check_bypass && 'Module_Check_Bypass' || 'Normal' }}-boot-gz
          path: "*-boot-gz.img"

      - name: Upload Boot Image (LZ4 Compressed)
        uses: actions/upload-artifact@v4
        with:
          name: WKSU-${{ env.KSUVER }}-${{ inputs.android_version }}-${{ inputs.kernel_version }}.${{ env.ACTUAL_SUBLEVEL || inputs.sub_level }}-${{ inputs.os_patch_level }}-${{ matrix.apply_module_check_bypass && 'Module_Check_Bypass' || 'Normal' }}-boot-lz4
          path: "*-boot-lz4.img"
          
